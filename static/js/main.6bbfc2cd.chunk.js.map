{"version":3,"sources":["counter.js","App.js","reportWebVitals.js","index.js"],"names":["timer","Counter","maxCount","minCount","useState","count","setCount","handleCountChanged","newCount","clearTimeout","setTimeout","updateCountInDataBase","bind","a","oRequestData","counter","axios","post","className","onClick","prevCount","type","value","onChange","oEvent","sValue","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAIIA,EAAQ,KAiEGC,MA/Df,YAAmD,IAAD,WAAhCC,gBAAgC,MAArB,IAAqB,MAAfC,gBAAe,MAAJ,EAAI,IACtBC,mBAASD,GADa,mBACzCE,EADyC,KAClCC,EADkC,KAkB1CC,EAAqB,SAACC,GACtBR,GACFS,aAAaT,GAEfA,EAAQU,WAAWC,EAAsBC,KAAK,EAAMJ,GAAW,MAG7DG,EAAqB,uCAAI,WAAMH,GAAN,eAAAK,EAAA,6DAC3BJ,aAAaT,GACTc,EAAe,CAACC,QAASP,GAFF,SAGrBQ,IAAMC,KAAK,qEAAsEH,GAH5D,2CAAJ,sDA4BzB,OACI,qBAAKI,UAAW,WAAhB,SACE,sBAAKA,UAAW,YAAhB,UACE,qBAAKA,UAAW,QAASC,QAbX,WACpBb,GAAS,SAACc,GACR,IAAIf,EAAQe,EAKZ,OAJIA,EAAYjB,IACdE,EAAQe,EAAY,GAEtBb,EAAmBF,GACZA,MAMH,iBACA,uBAAOgB,KAAM,OAAQH,UAAW,QAASI,MAAOjB,EAAOkB,SArDvC,SAACC,GACvB,IAAIC,EAASD,EAAOE,OAAOJ,MACvBG,GAAUtB,GAAYsB,GAAUvB,GAClCI,EAAkB,EAATmB,GACTlB,EAA4B,EAATkB,KAInBnB,EAASD,GACTE,EAAmBF,OA6Cf,qBAAKa,UAAW,OAAQC,QA1BT,WACrBb,GAAS,SAACc,GACR,IAAIf,EAAQe,EAKZ,OAJIA,EAAYlB,IACdG,EAAQe,EAAY,GAEtBb,EAAmBF,GACZA,MAmBH,uBCvDKsB,MAHf,WACE,OAAO,cAAC,EAAD,KCKMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6bbfc2cd.chunk.js","sourcesContent":["import './App.css';\r\nimport axios from 'axios';\r\nimport React, { useState} from 'react';\r\n\r\nlet timer = null;\r\n\r\nfunction Counter({maxCount = 1000, minCount = 1}) {\r\n  const [count, setCount] = useState(minCount);\r\n\r\n\r\n  const handleOnChanged = (oEvent) => {\r\n    let sValue = oEvent.target.value;\r\n    if (sValue >= minCount && sValue <= maxCount) {\r\n      setCount(sValue * 1);\r\n      handleCountChanged(sValue * 1);\r\n\r\n    }\r\n    else {\r\n      setCount(count);\r\n      handleCountChanged(count);\r\n\r\n    }\r\n  };\r\n\r\n  const handleCountChanged = (newCount) => {\r\n    if (timer) {\r\n      clearTimeout(timer)\r\n    }\r\n    timer = setTimeout(updateCountInDataBase.bind(this, newCount), 1000);\r\n  };\r\n\r\n  let updateCountInDataBase  = async(newCount) => {\r\n    clearTimeout(timer);\r\n    let oRequestData = {counter: newCount};\r\n    await axios.post('https://interview-8e4c5-default-rtdb.firebaseio.com/front-end.json', oRequestData);\r\n  };\r\n\r\n\r\n  const incrementCount = () => {\r\n    setCount((prevCount) => {\r\n      let count = prevCount;\r\n      if (prevCount < maxCount) {\r\n        count = prevCount + 1;\r\n      }\r\n      handleCountChanged(count);\r\n      return count\r\n    });\r\n  };\r\n\r\n  const decreaseCount = () => {\r\n    setCount((prevCount) => {\r\n      let count = prevCount;\r\n      if (prevCount > minCount) {\r\n        count = prevCount - 1;\r\n      }\r\n      handleCountChanged(count);\r\n      return count;\r\n    });\r\n  };\r\n  return (\r\n      <div className={\"artBoard\"}>\r\n        <div className={\"rectangle\"}>\r\n          <div className={\"minus\"} onClick={decreaseCount}> - </div>\r\n          <input type={\"text\"} className={\"count\"} value={count} onChange={handleOnChanged}/>\r\n          <div className={\"plus\"} onClick={incrementCount}> + </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\nexport default Counter;\r\n","import './App.css';\n\nimport React from 'react';\nimport Counter from \"./counter\";\n\n\nfunction App() {\n  return <Counter/>\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}